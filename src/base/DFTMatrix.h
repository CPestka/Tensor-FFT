#pragma once

//Due to limitations of fragments, the literals cant just be loaded from local
//memory into the fragments. So shared memory is used instead (shared memory
//can not be initialized, hence the copy).
//TODO: could be sliced into more copies -> less registers
__device__ __forceinline__ void LoadLiteralDFTMatrixToShared(int inter_warp_id,
                                                             __half* dft_RE,
                                                             __half* dft_IM){
  {
  __half dft_matrix_RE[256] = {
    1, 1, 1, 1,
    1, 1, 1, 1,
    1, 1, 1, 1,
    1, 1, 1, 1,

    1, 0.923828125, 0.70703125, 0.382568359375,
    0, -0.382568359375, -0.70703125, -0.923828125,
    -1, -0.923828125, -0.70703125, -0.382568359375,
    -0, 0.382568359375, 0.70703125, 0.923828125,

    1, 0.70703125, 0, -0.70703125,
    -1, -0.70703125, -0, 0.70703125,
    1, 0.70703125, 0, -0.70703125,
    -1, -0.70703125, -0, 0.70703125,

    1, 0.382568359375, -0.70703125, -0.923828125,
    -0, 0.923828125, 0.70703125, -0.382568359375,
    -1, -0.382568359375, 0.70703125, 0.923828125,
    0, -0.923828125, -0.70703125, 0.382568359375,

    1, 0, -1, -0,
    1, 0, -1, -0,
    1, 0, -1, -0,
    1, -0, -1, -0,

    1, -0.382568359375, -0.70703125, 0.923828125,
    0, -0.923828125, 0.70703125, 0.382568359375,
    -1, 0.382568359375, 0.70703125, -0.923828125,
    -0, 0.923828125, -0.70703125, -0.382568359375,

    1, -0.70703125, -0, 0.70703125,
    -1, 0.70703125, 0, -0.70703125,
    1, -0.70703125, -0, 0.70703125,
    -1, 0.70703125, -0, -0.70703125,

    1, -0.923828125, 0.70703125, -0.382568359375,
    -0, 0.382568359375, -0.70703125, 0.923828125,
    -1, 0.923828125, -0.70703125, 0.382568359375,
    -0, -0.382568359375, 0.70703125, -0.923828125,

    1, -1, 1, -1,
    1, -1, 1, -1,
    1, -1, 1, -1,
    1, -1, 1, -1,

    1, -0.923828125, 0.70703125, -0.382568359375,
    0, 0.382568359375, -0.70703125, 0.923828125,
    -1, 0.923828125, -0.70703125, 0.382568359375,
    -0, -0.382568359375, 0.70703125, -0.923828125,

    1, -0.70703125, 0, 0.70703125,
    -1, 0.70703125, -0, -0.70703125,
    1, -0.70703125, -0, 0.70703125,
    -1, 0.70703125, -0, -0.70703125,

    1, -0.382568359375, -0.70703125, 0.923828125,
    -0, -0.923828125, 0.70703125, 0.382568359375,
    -1, 0.382568359375, 0.70703125, -0.923828125,
    0, 0.923828125, -0.70703125, -0.382568359375,

    1, -0, -1, 0,
    1, -0, -1, -0,
    1, -0, -1, 0,
    1, 0, -1, 0,

    1, 0.382568359375, -0.70703125, -0.923828125,
    -0, 0.923828125, 0.70703125, -0.382568359375,
    -1, -0.382568359375, 0.70703125, 0.923828125,
    -0, -0.923828125, -0.70703125, 0.382568359375,

    1, 0.70703125, -0, -0.70703125,
    -1, -0.70703125, -0, 0.70703125,
    1, 0.70703125, -0, -0.70703125,
    -1, -0.70703125, 0, 0.70703125,

    1, 0.923828125, 0.70703125, 0.382568359375,
    -0, -0.382568359375, -0.70703125, -0.923828125,
    -1, -0.923828125, -0.70703125, -0.382568359375,
    0, 0.382568359375, 0.70703125, 0.923828125
  };

  #pragma unroll
  for(int i=0; i<8; i++){
    dft_RE[inter_warp_id + i * 32] = dft_matrix_RE[inter_warp_id + i * 32];
  }
  }
  {
  __half dft_matrix_IM[256] = {
    -0, -0, -0, -0,
    -0, -0, -0, -0,
    -0, -0, -0, -0,
    -0, -0, -0, -0,

    -0, -0.382568359375, -0.70703125, -0.923828125,
    -1, -0.923828125, -0.70703125, -0.382568359375,
    -0, 0.382568359375, 0.70703125, 0.923828125,
    1, 0.923828125, 0.70703125, 0.382568359375,

    -0, -0.70703125, -1, -0.70703125,
    -0, 0.70703125, 1, 0.70703125,
    0, -0.70703125, -1, -0.70703125,
    -0, 0.70703125, 1, 0.70703125,

    -0, -0.923828125, -0.70703125, 0.382568359375,
    1, 0.382568359375, -0.70703125, -0.923828125,
    -0, 0.923828125, 0.70703125, -0.382568359375,
    -1, -0.382568359375, 0.70703125, 0.923828125,

    -0, -1, -0, 1,
    0, -1, -0, 1,
    0, -1, -0, 1,
    0, -1, -0, 1,

    -0, -0.923828125, 0.70703125, 0.382568359375,
    -1, 0.382568359375, 0.70703125, -0.923828125,
    -0, 0.923828125, -0.70703125, -0.382568359375,
    1, -0.382568359375, -0.70703125, 0.923828125,

    -0, -0.70703125, 1, -0.70703125,
    -0, 0.70703125, -1, 0.70703125,
    0, -0.70703125, 1, -0.70703125,
    -0, 0.70703125, -1, 0.70703125,

    -0, -0.382568359375, 0.70703125, -0.923828125,
    1, -0.923828125, 0.70703125, -0.382568359375,
    -0, 0.382568359375, -0.70703125, 0.923828125,
    -1, 0.923828125, -0.70703125, 0.382568359375,

    -0, -0, 0, -0,
    0, -0, 0, -0,
    0, -0, 0, -0,
    0, 0, 0, -0,

    -0, 0.382568359375, -0.70703125, 0.923828125,
    -1, 0.923828125, -0.70703125, 0.382568359375,
    -0, -0.382568359375, 0.70703125, -0.923828125,
    1, -0.923828125, 0.70703125, -0.382568359375,

    -0, 0.70703125, -1, 0.70703125,
    -0, -0.70703125, 1, -0.70703125,
    0, 0.70703125, -1, 0.70703125,
    -0, -0.70703125, 1, -0.70703125,

    -0, 0.923828125, -0.70703125, -0.382568359375,
    1, -0.382568359375, -0.70703125, 0.923828125,
    -0, -0.923828125, 0.70703125, 0.382568359375,
    -1, 0.382568359375, 0.70703125, -0.923828125,

    -0, 1, -0, -1,
    0, 1, -0, -1,
    0, 1, -0, -1,
    0, 1, 0, -1,

    -0, 0.923828125, 0.70703125, -0.382568359375,
    -1, -0.382568359375, 0.70703125, 0.923828125,
    0, -0.923828125, -0.70703125, 0.382568359375,
    1, 0.382568359375, -0.70703125, -0.923828125,

    -0, 0.70703125, 1, 0.70703125,
    -0, -0.70703125, -1, -0.70703125,
    0, 0.70703125, 1, 0.70703125,
    0, -0.70703125, -1, -0.70703125,

    -0, 0.382568359375, 0.70703125, 0.923828125,
    1, 0.923828125, 0.70703125, 0.382568359375,
    -0, -0.382568359375, -0.70703125, -0.923828125,
    -1, -0.923828125, -0.70703125, -0.382568359375
  };

  #pragma unroll
  for(int i=0; i<8; i++){
    dft_IM[inter_warp_id + i * 32] = dft_matrix_IM[inter_warp_id + i * 32];
  }
  }
}
